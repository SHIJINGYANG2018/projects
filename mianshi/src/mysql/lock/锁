锁、

总结学习于
https://juejin.im/post/5b55b842f265da0f9e589e79
        即使我们不会这些锁知识，我们的程序在一般情况下还是可以跑得好好的。因为这些锁数据库隐式帮我们加了

    1、对于UPDATE、DELETE、INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)
    2、MyISAM在执行查询语句SELECT前，会自动给涉及的所有表加读锁，
    3、在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预

锁的粒度    (InnoDB行锁和表锁都支持！ MyISAM只支持表锁！)
    表锁
        开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低
    行锁
        开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高
    InnoDB只有通过索引条件检索数据才使用行级锁，否则，InnoDB将使用表锁
        也就是说，InnoDB的行锁是基于索引的！

    表锁下又分为两种模式：
        表读锁（Table Read Lock）
        表写锁（Table Write Lock）
        从下图可以清晰看到，在表读锁和表写锁的环境下：
          读读不阻塞，读写阻塞，写写阻塞！
            读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁
            读写阻塞：当前用户在读数据，其他的用户不能修改当前用户读的数据，会加锁！
            写写阻塞：当前用户在修改数据，其他的用户不能修改当前用户正在修改的数据，会加锁！
        读锁和写锁是互斥的，读写操作是串行
            如果某个进程想要获取读锁，同时另外一个进程想要获取写锁。在mysql里边，写锁是优先于读锁的
            写锁和读锁优先级的问题是可以通过参数调节的：max_write_lock_count和low-priority-updates
    拓展
        MyISAM可以支持查询和插入操作的并发进行。可以通过系统变量concurrent_insert来指定哪种模式，
        在MyISAM中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，
        另一个进程从表尾插入记录。
        但是InnoDB存储引擎是不支持的！

    行锁（细讲）
        InnoDB支持行锁
        InnoDB支持事务
        InnoDB实现了两种锁
            共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁
                也叫做读锁：读锁是共享的，多个客户可以同时读取同一个资源，但不允许其他客户修改。
            排他锁（X锁）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。
                也叫做写锁：写锁是排他的，写锁会阻塞其他的写锁和读锁。
            为了允许行锁和表锁共存，实现多粒度锁机制
             InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是表锁：
             意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。
             意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。
             意向锁也是数据库隐式帮我们做了，不需要程序员操心！
        MVCC和事务的隔离级别
             数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的，锁的应用最终导致不同事务的隔离级别
             MVCC(Multi-Version Concurrency Control)多版本并发控制，可以简单地认为：MVCC就是行级锁的一个变种(升级版)。

            Read uncommitted会出现的现象--->脏读：一个事务读取到另外一个事务未提交的数据
                例子：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多。
                出现脏读的本质就是因为操作(修改)完该数据就立马释放掉锁，导致读的数据就变成了无用的或者是错误的数据。
            Read committed避免脏读的做法其实很简单：
                是把释放锁的位置调整到事务提交之后，此时在事务提交前，其他进程是无法对该行数据进行读取的，包括任何操作
                但Read committed出现的现象--->不可重复读：一个事务读取到另外一个事务已经提交的数据，
                也就是说一个事务可以看到其他事务所做的修改
       虚读(幻读)：是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。

    乐观锁和悲观锁
        无论是Read committed还是Repeatable read隔离级别，都是为了解决读写冲突的问题。
        单纯在Repeatable read隔离级别下我们来考虑一个问题：

         如图   /images/所操作.webp   此时 用户李四的操作就丢失掉了
        丢失更新：一个事务的更新覆盖了其它事务的更新结果。

        1、乐观锁是一种思想，具体实现是，表中有一个版本字段，第一次读的时候，获取到这个字段。处理完业务逻辑开始更新的时候，
            需要再次查看该字段的值是否和第一次的一样。如果一样更新，反之拒绝。之所以叫乐观，因为这个模式没有从数据库加锁，
            等到更新的时候再判断是否可以更新。
        2、悲观锁是数据库层面加锁，都会阻塞去等待锁。

        ///https://zhuanlan.zhihu.com/p/31537871
      悲观锁   加锁，限制操作
        ····· select * from xxxx for update
        在select 语句后边加了 for update相当于加了排它锁(写锁)，加了写锁以后，
        其他的事务就不能对它修改了！需要等待当前事务修改完之后才可以修改.
        如果张三使用select ... for update，李四就无法对该条记录修改了~

      乐观锁
        乐观锁不是数据库层面上的锁，是需要自己手动去加的锁。一般我们添加一个版本字段来实现：

    间隙锁GAP
        当我们用范围条件检索数据而不是相等条件检索数据，并请求共享或排他锁时，
        InnoDB会给符合范围条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，
        叫做“间隙（GAP)”。InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。
        InnoDB使用间隙锁的目的有两个：
            1、为了防止幻读(上面也说了，Repeatable read隔离级别下再通过GAP锁即可避免了幻读)
            2、满足恢复和复制的需要
                MySQL的恢复机制要求：在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读
    死锁   https://www.cnblogs.com/LBSer/p/5183300.html
        般来说MySQL通过回滚帮我们解决了不少死锁的问题了，但死锁是无法完全避免的，可以通过以下的经验参考，来尽可能少遇到死锁：
        1）以固定的顺序访问表和行。比如对两个job批量更新的情形，简单方法是对id列表先排序，后执行，
            这样就避免了交叉等待锁的情形；将两个事务的sql顺序调整为一致，也能避免死锁。
        2）大事务拆小。大事务更倾向于死锁，如果业务允许，将大事务拆小。
        3）在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁概率。
        4）降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，
            可以避免掉很多因为gap锁造成的死锁。
        5）为表添加合理的索引。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。

