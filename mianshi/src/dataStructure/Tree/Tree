   二叉树

  完全二叉树
        若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，
  第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。
  满二叉树
        除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。
  平衡二叉树
        平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，
        且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，
        并且左右两个子树都是一棵平衡二叉树。
  堆
        堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，
        称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆

  红黑树  （自平衡的二叉查找树）
        学习地址
  http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191832&idx=1&sn=12017161025495c6914b5ab9397baa59&chksm=8c990c42bbee8554ba02eb83d839123bd3bead6ffc736111456ea77367a3df75750cf88016e0&scene=21#wechat_redirect
        特点
        每个节点非红即黑
        根节点是黑色的
        每个叶子节 都是黑色 的空节点
        如果节点是红色的，则他们 的子节点都是黑色的（反之不一定）
        从根节点到叶节点或空节点的每条路径，必须包含相同数目的黑色节点

        treeMap TreeSet   JDk1.8的HaseMap底层用到了红桃树
  B-  B+  B*树
        B-
            学习地址 B树
            http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190965&idx=1&sn=53f78fa037386f85531832cd5322d2a0&chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9&scene=21#wechat_redirect
         一个M 阶的B树特征
            根节点有两个子女
            每个中间节点都包含k-1个元素和k个孩子  其中 M/2<=k<=M
            每个叶子节点都包含k-1个元素，其中 m/2 <= k <= m
            所有的叶子结点都位于同一层。
            每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。
        B+
            学习地址B+树
            http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190965&idx=1&sn=53f78fa037386f85531832cd5322d2a0&chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9&scene=21#wechat_redirect
         一个M阶的B+树特征
            有k个子树的中间节点包含有k个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。
            所有的叶子结点中包含了全部元素的信息，及指向含这些元素记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。
            所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。
             优势
                1.单一节点存储更多的元素，使得查询的IO次数更少。
                2.所有查询都要查找到叶子节点，查询性能稳定。
                3.所有叶子节点形成有序链表，便于范围查询。



