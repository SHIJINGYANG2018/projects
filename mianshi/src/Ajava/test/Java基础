
在学习Java之前呢，我们都要搭建Java的开发环境，我们打开JDK的安装包进行安装
  当时，点开jdk安装包，会发现我们安装了两个文件夹，JDK,JRE
  当点开jdk文件夹的时候，里面还有一个jre的文件夹    ????

  jre:Java程序的运行环境，  既然要运行，我们肯定包含JVM。 将java文件解析成class文件，在jvm运行.
  它能够创建和编译程序。

  jdk: Java的开发工具， 。它是运行已编译 Java 程序所需的所有内容的集合，
  包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。


存在一层层的嵌套关系    JDK > JRE > JVM

1、面对对象  面对过程的 区别
面向对象    继承   多态     封装

面对过程   开销大，消耗资源，性能比面对对象好

2、Java语言的特点，
封装  继承   多态
平台无关性   Java虚拟机

3、java面对对象特性
  1>封装】‘

    封装把一个对象的属性私有化，同时提供提供一些外界可以访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界
，如果一个类没有提供给外界访问的方法，那么这个类可没有什么意义了，
  2>继承
    继承是在已存在类的定义作为基础，建立新类的技术，新类的定义，可以添加新的数据和新的功能，也可以用父类的方法，但不能选择性
    地继承父类，通过使用继承，我们能够非常方便地复用以前的代码
        1》子类拥有父类非private 的属性和方法
        2》子类可以拥有自己的属性和方法，即子类可以对父类进行拓展
        3》子类可以用自己的方式实现父类的方法
  3>多态
     所谓多态就是指，程序中定义的引用常量所指向的具体类型和通过该引用常量发出的方法调用在编程时并不确定，而是在程序中运行期间
     才确定，即一个引用常量到底会指向那个类的实例对象，该引用方法调用到底是哪个类实现的方法，必须在由程序运行期间才能运行
        多态两种形式,
            继承：多个子类在同一方法的重写
            接口：实现接口并覆盖接口中同一方法
     实际上这里涉及方法调用的优先问题 ，优先级由高到低依次为：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)
     父类：people
     子类：student
     people people=new student();


4、重载   重写的区别
   1>重载
       在同一个类中，方法名必须相同，参数类型不同，个数不同，顺序不同，方法返回值不同，和访问的修饰符不同，（发生在编译时）

   2>重写
        发生在子父类中，方法名，参数列表必须相同，返回值必须小于等于父类，抛出的异常范围小于等于父类，修饰符大于等于父类
        如果父类的方式修饰符是private 那么子类就不能重写该方法

5、Java   C++区别
   1>都是面对对象    继承  封装   多态
   2>Java不提供指针直接访问内存，程序内存更加安全
   3>Java属于单继承，C++可以多继承，但是Java有接口可以多继承
   4>Java有自动内存管理机制，不需要程序员手动释放无用内存

6、String  StringBuffer   StringBuilder  三者的区别  string为什么不可变
    1>可变性
       string源码    存储字符 private final char value[];  使用了final 修饰  而StringBuffer   StringBuilder都继承了
       AbstractStringBuilder类，AbstractStringBuilder存储的是char[] value; 没有使用final关键字修饰所以可以修改
    2>线程安全
        String中的对象是不可变的，可就是理解为常量，线程安全。AbstractStringBuilder 是StringBuffer   StringBuilder的公共父类
        定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。 StringBuffer对方法加了同步锁
        或者对调用的方法加了同步锁，所以线程是安全的，StringBuilder没有对方法添加同步锁，所以非线程安全的
    3>性能
        每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。
        StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。
        相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。
    4>总结
        1》操作少量的数据   String
        2》单线程操作字符缓存区下操作大量的数据使用，StringBuilder
        3》多线程操作字符缓冲区下操作大量的数据使用，StringBuffer

6、一个静态的方法内调用一个非静态成员为什么是非法的
      由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态的变量，也不可以访问非静态变量成员。

7、在Java中定义一个不做事且没有参数的构造方法的作用
      Java程序在执行子类的构造方法之前，如果没有super()来调用父类特定方法的构造方法，那就会调用 父类中“没有参数的构造方法”
      因此 如果父类中只定义了有参数的方法，而在子类的构造方法中 没有用到super()来调用父类的特定的构造方法，在编译的时候就
      会编译错误 。 因为java 程序在父类中找不到没有参数的构造方法可供执行，。解决方法是在父类中创建一个不做事且没有参数
      的构造方法

8、接口   抽象类    的区别
      1>接口的方法默认都是public,接口所有方法都不能实现  抽象类可以有非抽象的方法
      2>接口中的实例变量默认为 final  而抽象类不一定
      3>一个类可以实现多个接口，但最多一个抽象类
      4>一个类实现接口的话，需要实现接口中所有的方法，而抽象类不一定
      5>接口不能new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象是对类的抽象，
        是一种模板设计，接口是行为的抽象，是一种行为的规范。
      6>备注:在JDK8中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，
        接口中定义了一样的默认方法，必须重写，不然会报错。
9、成员变量  局域变量 区别
      1>语法形式上，
            成员变量属于class  变量可以使用 final  public private static 修饰
            局域变量属于方法，只能使用final 修饰 或者不修饰
      2>从变量在内存中的存储方式来看
            如果成员变量是使用static修饰的，那么这个成员变量是属于类的，
            如果没有使用使用static修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量存在于栈内存
      3>从变量在内存中的生存时间上看
            成员变量是对象的一部分，它随着对象的创建而存在，
            而局部变量随着方法的调用而自动消失
      4>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；
            而局部变量则不会自动赋值。
10、==  equals  区别
      ==  ：作用是比较两个对象的地址是不是相等，即判断两个对象是不是一个对象，
               基本数据类型==比较的是值  引用数据类型==比较的是内存地址。
       equals：他的作用是判断两个对象是否相等，但他一般有两种情况。
                情况一：类没有覆盖。equals方法，，则通过比较该类的两个对象时，等价于  通过   ’==‘比较这两个对象
                情况二：类覆盖了equals方法。一般，我们都覆盖了equals方法来判断两个对象的相等，若他们内容相等，他们返回true
        String s="s";
        String ss="s";
        StringBuffer sbf=new StringBuffer("s");
        StringBuffer stringBuffer = new StringBuffer("s");
        String s1 = new String("s");
        String s2 = new String("s");
        System.out.println(s==ss);  //true
        System.out.println(s.equals(ss));//true
        System.out.println(s1==s2);//false
        System.out.println(s1.equals(s2));//true
        System.out.println(sbf.equals(stringBuffer));//false
        System.out.println(sbf==stringBuffer);//false

        解释：String中的equals方法被重写过，而 object 的equals方法比较的是内存地址，而String 的 equals  比较的是对象的值内容。
        当创建String 类型的对象时，虚拟机会在常量池中查找有没有已经存下的值，和要创建的值相同的对象，如果有就把他赋值给当前应用，
           如果没有就在常量池中重新创建一个String对象。
11、hashCode   equals
      https://www.cnblogs.com/skywang12345/p/3324958.html
      hashCode()介绍
      hashCode()的作用是获取哈希值，一个int的整数,这个哈希值的作用是确定该对象在哈希表中的索引位置，hashCode()定义在JDK的
        object.java中，object是所有类的父类，这就意味着所有的Java问价都有HashCode()函数

      为什么要有 hashCode

        我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：
        当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的
        hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，
        这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。
        如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals
        的次数，相应就大大提高了执行速度。
      hashCode（）与equals（）的相关规定
        1> 如果两个对象相同，那么hashcode()一定相等
        2>两个对象相等,对两个对象分别调用equals方法都返回true
        3>两个对象有相同的hashcode值，它们也不一定是相等的
        4>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖
        5>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等
          即使这两个对象指向相同的数据）
12、关于 final 关键字的一些总结
        final关键字主要用在三个地方：变量、方法、类。

        对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，
        则在对其初始化之后便不能再让其指向另一个对象。
        当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。
        使用final方法的原因有两个。
                 第一个原因是把方法锁定，以防任何继承类修改它的含义；
                 第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，
                  可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。
                  类中所有的private方法都隐式地指定为final。
13、Java异常处理
        在 Java 中，所有的异常都有一个共同的祖先java.lang包中的 Throwable类。Throwable：
        有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。

                Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，
                    而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），
                    当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）
                    一般会选择线程终止。

                这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、
                类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，
                而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，
                本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。

                Exception（异常）:是程序本身可以处理的异常。Exception 类有一个重要的子类 RuntimeException
                 。RuntimeException 异常由Java虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、
                  ArithmeticException（算术运算异常，一个整数除以0时，抛出该异常）和 ArrayIndexOutOfBoundsException （下标越界异常）。
        异常处理总结
            **try 块：**用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。
            **catch 块：**用于处理try捕获到的异常。
            **finally 块：**无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return语句时，
            finally语句块将在方法返回之前被执行。
14、Java序列化中如果有些字段不想进行序列化 怎么办
        序列化和反序列化的概念
                把对象转换为字节序列的过程称为对象的序列化。
        　　  把字节序列恢复为对象的过程称为对象的反序列化。
        对象的序列化主要有两种用途
              把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
        　　  在网络上传送对象的字节序列。
        对于不想进行序列化的变量，使用transient关键字修饰
              transient关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，
              被transient修饰的变量值不会被持久化和恢复。transient只能修饰变量，不能修饰类和方法。
15、获取键盘输入
        1>BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
            String s5 = bufferedReader.readLine();
            System.out.println(s5);
        2>new Scanner(System.in);
16、this  staic super final
        final关键字主要用在三个地方：变量、方法、类
        1>修饰变量
            对于一个final的变量，如果修饰的是一个基本数据类型，数值一旦被初始化之后便不能更改，如果修饰的是一个引用变量，
            则在其初始值之后便不能再让其只想另一个对象。
        2>修饰类
            当final修饰一个类的时候，表明这个类不能被继承，该类中的所有属性和方法都被隐形的添加了final修饰
        3>修饰方法
            使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；
            、第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，
            可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。
            类中所有的private方法都隐式地指定为final。
        static（执行顺序   (静态代码块—>非静态代码块—>构造方法)）
        static一般使用个在四个场景  类 ，方法、变量（只能修饰成员变量，不能修饰局域变量）， 静态代码块 ，导包
        1>修饰成员变量，成员方法
             被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。
             被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。
             调用格式：类名.静态变量名 类名.静态方法名()
        2>静态代码块
             静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—>非静态代码块—>构造方法)。
             该类不管创建多少对象，静态代码块只执行一次
        3>静态内部类（static修饰类的话只能修饰内部类）
               静态内部类与非静态内部类之间存在一个最大的区别: 非静态内部类在编译完成之后会隐含地保存着一个引用，
               该引用是指向创建它的外围类，但是静态内部类却没有。
               没有这个引用就意味着：
               1. 它的创建是不需要依赖外围类的创建。
               2. 它不能使用任何外围类的非static成员变量和方法。
        4>静态导包(用来导入类中的静态资源，1.5之后的新特性):
                格式为：import static 这两个关键字连用可以指定导入某个类中的指定静态资源，
                并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。
        this 关键字
                this关键字用于引用类的当前实例
                class Manager {
                    Employees[] employees;
                    void manageEmployees() {
                        int totalEmp = this.employees.length;
                        System.out.println("Total employees: " + totalEmp);
                        this.report();
                    }
                    void report() { }
                }
                在上面的示例中，this关键字用于两个地方：
                this.employees.length：访问类Manager的当前实例的变量。
                this.report（）：调用类Manager的当前实例的方法。
                此关键字是可选的，这意味着如果上面的示例在不使用此关键字的情况下表现相同。 但是，使用此关键字可能会使代码更易读或易懂。
        super 关键字
                super关键字用于从子类访问父类的变量和方法。 例如：
                public class Super {
                    protected int number;

                    protected showNumber() {
                        System.out.println("number = " + number);
                    }
                }
                public class Sub extends Super {
                    void bar() {
                        super.number = 10;
                        super.showNumber();
                    }
                }
                在上面的例子中，Sub 类访问父类成员变量 number 并调用其其父类 Super 的 showNumber（） 方法。
                使用 this 和 super 要注意的问题
                    super 调用父类中的其他构造方法时，调用时要放在构造方法的首行！this 调用本类中的其他构造方法时，也要放在首行。
                    this、super不能用在static方法中。
                被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而 this 代表对本类对象的引用，
                指向本类对象；而 super 代表对父类对象的引用，指向父类对象；
                所以， this和super是属于对象范畴的东西，而静态方法是属于类范畴的东西。

        static{}静态代码块与{}非静态代码块(构造代码块)
                相同点：
                    都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个时按定义的顺序执行，
                    一般在代码块中对一些static变量进行赋值。
                不同点：
                    静态代码块在非静态代码块之前执行(静态代码块—非静态代码块—构造方法)。静态代码块只在第一次new执行一次，
                    之后不再执行，而非静态代码块在每new一次就执行一次。 非静态代码块可在普通方法中定义(不过作用不大)；
                    而静态代码块不行

                   例子
                    public class Test {
                        public Test() {
                            System.out.print(默认构造方法！--);
                        }
                         非静态代码块
                        {
                            System.out.print(非静态代码块！--);
                        }
                         静态代码块
                        static {
                            System.out.print(静态代码块！--);
                        }
                        public static void test() {
                            System.out.print(静态方法中的内容! --);
                            {
                                System.out.print(静态方法中的代码块！--);
                            }
                        }
                        public static void main(String[] args) {
                            Test1 test = new Test1();  ///静态代码块！--   非静态代码块！-- 默认构造方法！--
                            Test1.test1();   //--静态方法中的内容! --静态方法中的代码块！
                        }
                    当执行 Test.test(); 时输出：
                       --静态方法中的内容! --静态方法中的代码块！--
                    当执行 Test test = new Test(); 时输出：
                         静态代码块！--非静态代码块！--默认构造方法！--


17、反射机制

18、构造器的作用，如果没有可以正常正常运行 吗
        构造器完成对类的初始化作用，
        可以，即使没有没有参数的构造器，在编译的时候，jvm 会自动为该类生成一个不带参数的构造器

19、构造器特性
        方法名与类名一样
        没有返回值，也不能用void 修饰
        在初始化(new)使用

20、静态方法和实例方法有何不同

        调用：静态方法  class名称.方法名  或者  对象名.方法名   实例方法   对象名.方法名
        静态方法
            在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），
            而不允许访问实例成员变量和实例方法；

            实例方法则无此限制

21、Collections工具类  操作List集合的工具，有排序，查找，替换
    Arrays工具类    操作数组的工具类。 有排序，查找，比较，复置等
